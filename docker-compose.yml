volumes:
  ckan_storage:
    external: true
  ckan_pg_data:
    external: true
  ckan_solr_data:
    external: true

services:
  ckan:
    container_name: ${CKAN_CONTAINER_NAME}
    build:
      context: ckan/
      dockerfile: Dockerfile
      args:
        - TZ=${TZ}
    networks:
      - ckannet
      - dbnet
      - solrnet
      - redisnet
      - webnet
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      solr:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ckan_storage:/var/lib/ckan
      - ${KEY_DIR}:/keys
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "wget", "-qO", "/dev/null", "http://localhost:${CKAN_PORT_HOST}" ]
    labels:
      - traefik.enable=true
      - traefik.http.routers.ckan.rule=Host(`${TRAEFIK_HOST}`)
      - "traefik.http.routers.ckan.tls=true"
      - "traefik.http.routers.ckan.tls.certresolver=myresolver"
      - traefik.http.services.ckan.loadbalancer.server.port=${CKAN_PORT_HOST}


  datapusher:
    container_name: ${DATAPUSHER_CONTAINER_NAME}
    networks:
      - ckannet
      - dbnet
    image: ckan/ckan-base-datapusher:${DATAPUSHER_VERSION}
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "wget", "-qO", "/dev/null", "http://localhost:8800" ]

  db:
    container_name: ${POSTGRESQL_CONTAINER_NAME}
    build:
      context: postgresql/
    networks:
      - dbnet
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - CKAN_DB_USER
      - CKAN_DB_PASSWORD
      - CKAN_DB
      - DATASTORE_READONLY_USER
      - DATASTORE_READONLY_PASSWORD
      - DATASTORE_DB
    volumes:
      - ckan_pg_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}" ]

  solr:
    container_name: ${SOLR_CONTAINER_NAME}
    networks:
      - solrnet
    image: ckan/ckan-solr:${SOLR_IMAGE_VERSION}
    volumes:
      - ckan_solr_data:/var/solr
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "wget", "-qO", "/dev/null", "http://localhost:8983/solr/" ]

  redis:
    container_name: ${REDIS_CONTAINER_NAME}
    image: redis:${REDIS_VERSION}
    networks:
      - redisnet
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "-e", "QUIT" ]

networks:
  ckannet:
  solrnet:
    internal: true
  dbnet:
    internal: true
  redisnet:
    internal: true
